@extern("C") fn loop(T, U; from T, do (T) -> Control(T, U)) -> U

fn match(T, U; value T, do T => U) -> U;

fn cases(T; of Void => T) -> T = match(null, of);

fn if(T; cond Bool, then () -> T = () -> { null }, else () -> T = () -> { null }) -> T = match (cond) {
    true => then(),
    false => else()
};

fn foreach(T, U; of #iterable(T), do (T) -> Control(Void, Void)) -> {
    loop (of:head()) do (item) -> {
        (item ?> do) ?= break
    }
}

test "Cases" {
    x = 5;
    y = 6;

    z = cases of {
        ~ x > y => x * y,
        ~ x < y => x + y,
        _ => 0 
    };

    @assert (5 == 6);
}